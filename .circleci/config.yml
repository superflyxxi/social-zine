version: 2.1

variables:
  node-version: &node-version '22.12.0'
  node-executor: &node-executor
    name: node/default
    tag: *node-version

parameters:
    node-version:
      type: string
      default: *node-version

orbs:
  node: circleci/node@4
  docker: circleci/docker@2.8.1
  sonarcloud: sonarsource/sonarcloud@2.0.0

commands:
  export-primary-docker-tag:
    # Assuming /tmp/workspace as the files required
    steps:
      - run:
          name: Determine docker tag
          command: |
            echo "export PRIMARY_DOCKER_TAG=$(cat /tmp/workspace/short_version.txt | sed 's#/#-#g')" >> ${BASH_ENV}
  install-ssh-dependencies:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:K1kowcyvmG5stCZAjRqwJCtFpJ+dpBIDP/sks1erWvk"
      - run:
          name: Configure SSH Known Hosts
          command: |
            ssh-keyscan -p ${SSH_PORT} ${SSH_SERVER} >> ~/.ssh/known_hosts
  upload-file:
    parameters:
      file:
        description: the file to upload
        type: string
      service:
        description: The service name being deployed.
        type: string
    steps:
      - run:
          name: Upload << parameters.file >>
          command: |
            scp -P ${SSH_PORT} -v << parameters.file >> ${SSH_USER}@${SSH_SERVER}:${SSH_DOCKER_COMPOSE_REMOTE_DIR}/<< parameters.service >>
  execute-remote:
    parameters:
      command:
        description: The command to execute
        type: string
    steps:
      - run:
          name: Execute a remote command
          command: |
            sshpass -e ssh ${SSH_USER}@${SSH_SERVER} -p ${SSH_PORT} "${SSH_DOCKER_COMPOSE_REMOTE_DIR}/<< parameters.command >>"

jobs:
  build-js:
    resource_class: small
    executor: *node-executor 
    parameters:
      project:
        description: The sub-project to work on.
        type: string
    environment:
      MONGOMS_DEBUG: false
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: install packages
          command: |
            cd common
            npm ci
            cd ../<< parameters.project >>
            npm ci
      - run:
          name: Unit Tests
          working_directory: ./<< parameters.project >>
          environment:
            MOCHA_FILE: ./test-results.xml
          command: |
            cp -v ../.c8rc.json ../.mocharc.json ./
            npm test -- --forbid-pending --forbid-only --reporter mocha-junit-reporter
      - run:
          name: Tar coverage
          command: tar -vcf << parameters.project >>-coverage.tar << parameters.project >>/coverage/
      - store_test_results:
          path: ./<< parameters.project >>/test-results.xml
      - store_artifacts:
          path: ./<< parameters.project >>/coverage/
      - persist_to_workspace:
          root: ./
          paths:
            - ./*coverage.tar*

  validate-format:
    resource_class: small
    executor: *node-executor 
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Verify XO
          command: |
            find . -mindepth 1 -maxdepth 1 -type d | grep -v "\./\..*" | grep -v "\./node_modules" | xargs npm run xo -- 

  sonar-scan:
    executor: *node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Untar coverage
          command: |
            find ./ -maxdepth 1 -name '*coverage.tar*' -exec tar -vxf {} \;
      - run:
          name: Clean up Coverage
          command: |
            echo "Showing directories first"
            find . -maxdepth 2 -name coverage -type d
            echo "now running"
            set -x
            find . -maxdepth 2 -name coverage -type d | sed 's#\(.*\)/coverage#\1#g' | xargs -L1 -I{} sed -i 's#SF:#SF:{}/#g' {}/coverage/lcov.info
            find . -name lcov.info -exec cat {} \;
      - run:
          name: Configure sonar-project.properties
          command: |
            printf "sonar.sources=%s\n" $(find . -maxdepth 2 -name src -type d | grep -v "template" | xargs echo | sed 's/ /,/g') >> sonar-project.properties
            printf "sonar.tests=%s\n" $(find . -maxdepth 2 -name test -type d | grep -v "template" | xargs echo | sed 's/ /,/g') >> sonar-project.properties
            printf "sonar.javascript.lcov.reportPaths=%s\n" $(find . -name lcov.info -type f | xargs echo | sed 's/ /,/g') >> sonar-project.properties
            cat sonar-project.properties
      - sonarcloud/scan

  build-docker:
    parameters:
      project:
        description: The sub-project to work on.
        type: string
    docker:
      - image: cimg/base:stable
    steps:
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
          - setup_remote_docker:
              docker_layer_caching: false
      - unless:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
          - setup_remote_docker:
              docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker images
          command: |
            ls /tmp/workspace
            if [[ -f /tmp/workspace/common-image.tar ]]; then
              docker load -i /tmp/workspace/common-image.tar
            fi
      - export-primary-docker-tag
      - checkout
      - run: 
          name: Determine version.txt
          working_directory: ./<< parameters.project >>
          command: |
            cp -v /tmp/workspace/full_version.txt ./src/version.txt
      - run:
          name: Determine Tag and Common Image Name
          working_directory: ./<< parameters.project >>
          command: |
            export DOCKER_TAGS=${PRIMARY_DOCKER_TAG}
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
              for A in $(echo ${PRIMARY_DOCKER_TAG} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export DOCKER_TAGS="${DOCKER_TAGS},${NOW:1}"
                PREV=$NOW
              done
              export DOCKER_TAGS="${DOCKER_TAGS},main,latest"
            fi
            if [[ "common" != "<< parameters.project >>" ]]; then
              echo "export COMMON_IMAGE=${PRIVATE_DOCKER_REGISTRY}/${PRIVATE_DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}/common:${PRIMARY_DOCKER_TAG}" >> ${BASH_ENV}
            fi
            echo "export DOCKER_TAGS=${DOCKER_TAGS}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - run:
          name: Determine cache from images
          command: |
            export CACHE_APP=<< parameters.project >>
            if [[ "${CACHE_APP}" == "common" ]]; then export CACHE_APP="posts"; fi
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
              export CACHE_FROM_IMAGES="${PRIVATE_DOCKER_REGISTRY}/${PRIVATE_DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CACHE_APP}:${PRIMARY_DOCKER_TAG:0:1}"
            else
              export CACHE_FROM_IMAGES="${PRIVATE_DOCKER_REGISTRY}/${PRIVATE_DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CACHE_APP}:main"
            fi
            echo "export CACHE_FROM_IMAGES=${CACHE_FROM_IMAGES}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: ${PRIVATE_DOCKER_REGISTRY}
          docker-password: PRIVATE_DOCKER_PASSWORD
          docker-username: PRIVATE_DOCKER_USERNAME
      - run:
          name: Docker pull cache images
          command: |
            for I in $(echo ${CACHE_FROM_IMAGES} | tr "," "\n"); do
              echo "Pulling $I"
              docker pull $I || if [[ "main" == "<< pipeline.git.branch >>" ]]; then true; else false; fi
            done
      - docker/build:
          step-name: Build << parameters.project >> docker image
          docker-context: ./<< parameters.project >>
          path: ./<< parameters.project >>
          image: ${PRIVATE_DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}/<< parameters.project >>
          registry: ${PRIVATE_DOCKER_REGISTRY}
          tag: ${DOCKER_TAGS}
          extra_build_args: --build-arg COMMON_IMAGE=${COMMON_IMAGE} --build-arg NODE_VERSION=<< pipeline.parameters.node-version >>
          cache_from: ${CACHE_FROM_IMAGES}
      - run:
          name: Save docker image
          command: |
            docker images --format '{{ .Repository }}:{{.Tag}}' | grep -v "<none>" | grep "<< parameters.project >>" | xargs docker save -o << parameters.project >>-image.tar
      - persist_to_workspace:
          root: ./
          paths:
            - << parameters.project >>-image.tar*

  release:
    resource_class: small
    executor: *node-executor 
    parameters:
      prerelease:
        description: Whether it's a pre-release and not actually release.
        type: boolean
        default: false
    steps:
      - checkout
      - node/install-packages
      - attach_workspace:
          at: /tmp/workspace
      - when:
          condition: << parameters.prerelease >>
          steps:
            - run:
                name: Define additional args
                command: |
                  echo "export ADDITIONAL_ARGS=--dry-run" >> ${BASH_ENV}
      - run:
          name: Run semantic-release
          command: npx semantic-release ${ADDITIONAL_ARGS}
      - run:
          name: Capture version
          command: |
            if [[ "" == "$(cat version.txt)" ]]; then 
              printf "%s-%s" ${CIRCLE_BRANCH} ${CIRCLE_SHA1:0:7} | sed 's#/#-#g' > /tmp/workspace/full_version.txt
              printf "${CIRCLE_BRANCH}" | sed 's#/#-#g' > /tmp/workspace/short_version.txt
            else
              cp -v version.txt /tmp/workspace/full_version.txt
              cp -v version.txt /tmp/workspace/short_version.txt
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - full_version.txt
            - short_version.txt

  deploy-docker-compose:
    resource_class: small
    docker:
      - image: cimg/base:stable
    parameters:
      project:
        description: The sub-project to work on.
        type: string
      env:
        description: Which environment to deploy
        type: enum
        default: "wip"
        enum: ["wip", "prod"]
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - export-primary-docker-tag
      - checkout
      - run:
          name: Generate docker-compose file
          working_directory: ./<< parameters.project >>
          command: |
            cat docker-compose.yml |\
              sed "s#\${PRIVATE_DOCKER_REGISTRY}#${PRIVATE_DOCKER_REGISTRY}#g" |\
              sed "s#\${PRIMARY_DOCKER_TAG}#${PRIMARY_DOCKER_TAG}#g" |\
              sed "s#\${ENV}#<< parameters.env >>#g" \
              > docker-compose.<< parameters.env >>.yml
            cat docker-compose.<< parameters.env >>.yml
      - install-ssh-dependencies
      - upload-file:
          file: << parameters.project >>/docker-compose.<< parameters.env >>.yml
          service: ${CIRCLE_PROJECT_REPONAME}/<< parameters.project >>
      - execute-remote:
          command: ci-deploy.sh ${CIRCLE_PROJECT_REPONAME}-<< parameters.project >>-<< parameters.env >>

  integration-test:
    docker:
      - image: cimg/base:stable
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - attach_workspace:
          at: /tmp/workspace
      - export-primary-docker-tag
      - run:
          name: Load docker images
          command: |
            find /tmp/workspace -name '*-image.tar' -exec docker load -i {} \;
      - checkout
      - docker/build:
          step-name: Build integration testing docker image
          docker-context: ./int-test
          path: ./int-test
          image: ${PRIVATE_DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}/int-test
          registry: ${PRIVATE_DOCKER_REGISTRY}
          tag: ${PRIMARY_DOCKER_TAG}
          extra_build_args: --build-arg NODE_VERSION=<< pipeline.parameters.node-version >>
      - docker/check:
          registry: ${PRIVATE_DOCKER_REGISTRY}
          docker-password: PRIVATE_DOCKER_PASSWORD
          docker-username: PRIVATE_DOCKER_USERNAME
      - docker/push:
          step-name: Push integration testing docker image
          image: ${PRIVATE_DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}/int-test
          registry: ${PRIVATE_DOCKER_REGISTRY}
          tag: ${PRIMARY_DOCKER_TAG}
      - run:
          name: Bring up
          command: |
            docker compose -f int-test/docker-compose.yml up --abort-on-container-exit --exit-code-from test

  publish-docker:
    executor: docker/machine
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - docker/check:
          registry: ${PRIVATE_DOCKER_REGISTRY}
          docker-password: PRIVATE_DOCKER_PASSWORD
          docker-username: PRIVATE_DOCKER_USERNAME
      - run:
          name: Load docker images
          command: |
            find /tmp/workspace -name '*-image.tar' -exec docker load -i {} \;
      - export-primary-docker-tag
      - run:
          name: Export DOCKER_TAGS
          command: |
            export DOCKER_TAGS=${PRIMARY_DOCKER_TAG}
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
              for A in $(echo ${PRIMARY_DOCKER_TAG} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export DOCKER_TAGS="${DOCKER_TAGS},${NOW:1}"
                PREV=$NOW
              done
              export DOCKER_TAGS="${DOCKER_TAGS},main,latest"
            fi
            echo "export DOCKER_TAGS=${DOCKER_TAGS}" >> ${BASH_ENV}
            echo "DOCKER_TAGS=${DOCKER_TAGS}"
      - docker/push:
          step-name: Push posts
          image: ${PRIVATE_DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}/posts
          registry: ${PRIVATE_DOCKER_REGISTRY}
          tag: ${DOCKER_TAGS}
      - docker/push:
          step-name: Push zine-generator
          image: ${PRIVATE_DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}/zine-generator
          registry: ${PRIVATE_DOCKER_REGISTRY}
          tag: ${DOCKER_TAGS}

workflows:
  default:
    jobs:
      - release:
          name: pre-release
          context: default
          prerelease: true
      - build-js:
          context: default
          name: build-js-common
          project: common
      - build-js:
          context: default
          requires:
            - build-js-common
          matrix:
            parameters:
              project: 
                - zine-generator
                - posts
      - validate-format:
          context: default
      - sonar-scan:
          context: default
          requires:
            - build-js
      - docker/hadolint:
          name: validate-dockerfiles
          context: default
          dockerfiles: "common/Dockerfile:int-test/Dockerfile:template/Dockerfile:zine-generator/Dockerfile:posts/Dockerfile"
      - build-docker:
          context: default
          project: common
          name: build-docker-common
          requires:
            - pre-release
            - build-js-common
            - pre-release
      - build-docker:
          context: default
          matrix:
            parameters:
              project: 
                - zine-generator
                - posts
          requires:
            - build-js
            - build-docker-common
      - release:
          prerelease: false
          context: default
          requires:
            - publish-docker-private
          filters:
            branches:
              only:
                - main
      - integration-test:
          context: default
          requires:
            - build-docker
      - publish-docker:
          name: publish-docker-private
          context: default
          requires:
            - build-docker
      - deploy-docker-compose:
          context: default
          matrix:
            parameters:
              env: 
                - wip
              project: 
                - zine-generator
                - posts
          requires:
            - publish-docker-private
            - integration-test
          filters:
            branches:
              only:
                - docker-compose
      - deploy-docker-compose:
          context: default
          matrix:
            parameters:
              env: 
                - prod
              project: 
                - zine-generator
                - posts
          requires:
            - publish-docker-private
            - integration-test
          filters:
            branches:
              only:
                - docker-compose
